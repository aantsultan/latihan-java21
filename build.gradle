plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id 'org.graalvm.buildtools.native' version "${graalvmBuildtoolsVersion}"
}

group = 'com.latihan.java21'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

allprojects {
    apply plugin: 'java'
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
    }
    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
    test {
        useJUnitPlatform()
    }
}

project('latihan-java21-spring-restful-api') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'org.graalvm.buildtools.native'
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-web:${springWebVersion}"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springDataJpaVersion}"
        implementation "org.springframework.boot:spring-boot-starter-validation:${springBootValidationVersion}"
        implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
        implementation "io.jsonwebtoken:jjwt-api:${jjwtApiVersion}"
        implementation "io.jsonwebtoken:jjwt-impl:${jjwtImplVersion}"
        implementation "io.jsonwebtoken:jjwt-jackson:${jjwtJackson}"
        implementation "org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}"
        implementation "org.springframework.session:spring-session-data-redis:${springSessionDataRedisVersion}"

        runtimeOnly "org.mariadb.jdbc:mariadb-java-client:${mariaDbClientVersion}"
        developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"

        implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
    }
}

project('latihan-java21-spring-ai') {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'org.graalvm.buildtools.native'
    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-web:${springWebVersion}"
        implementation "org.deeplearning4j:deeplearning4j-core:${deeplearning4jVersion}" // Native Deep Learning
        implementation "nz.ac.waikato.cms.weka:weka-stable:${wekaVersion}" // Machine Learning
        implementation "org.apache.opennlp:opennlp-tools:${opennlpVersion}" // NLP
        implementation "edu.stanford.nlp:stanford-corenlp:${stanfordCodeNlpVersion}" // NLP
        implementation "edu.stanford.nlp:stanford-corenlp:${stanfordCodeNlpVersion}:models" // NLP
        implementation "com.opencsv:opencsv:${opencsvVersion}"
        implementation "org.nd4j:nd4j-native-platform:${nd4jNativeVersion}"

        // Pretrained Model
        implementation "ai.djl:api:${aidjlVersion}"
        implementation "ai.djl.pytorch:pytorch-engine:${aidjlPytorchVersion}"
        implementation "ai.djl.pytorch:pytorch-model-zoo:${aidjlPytorchModelVersion}"

        // Open API
        implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

        implementation "org.springframework:spring-webflux:${springWebfluxVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"

        // Spring AI
        implementation "org.springframework.ai:spring-ai-client-chat:${springAiVersion}"
//        implementation "org.springframework.ai:spring-ai-openai-spring-boot-starter:${springAiOpenAiVersion}"
        //implementation("org.springframework.ai:spring-ai-ollama-spring-boot-starter:${springOllamaVersion}")
        implementation "org.freemarker:freemarker:${freemarkerVersion}"

        testImplementation "org.testcontainers:junit-jupiter:${testContainerVersion}"
        testImplementation "org.testcontainers:testcontainers:${testContainerVersion}"
    }
    sourceSets {
        main {
            resources {
                srcDir 'src/main/resources/images'
                includes = ['**/*']
            }
        }
    }
}

graalvmNative {
    toolchainDetection = true
}

graalvmNative {
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
                vendor = JvmVendorSpec.matching("Oracle Corporation")
            }
        }
    }
}